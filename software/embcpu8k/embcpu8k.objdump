
embcpu8k.elf:     file format elf32-littlenios2
embcpu8k.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00002020

Program Header:
    LOAD off    0x00001000 vaddr 0x00002000 paddr 0x00002000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00002020 paddr 0x00002020 align 2**12
         filesz 0x00000394 memsz 0x000003a0 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00002000  00002000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         00000394  00002020  00002020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  000023b4  000023b4  000013b4  2**2
                  ALLOC, SMALL_DATA
  3 .comment      00000026  00000000  00000000  000013b4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000188  00000000  00000000  000013e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001e2  00000000  00000000  00001568  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ad9  00000000  00000000  0000174a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005ab  00000000  00000000  00002223  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000016e9  00000000  00000000  000027ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001fc  00000000  00000000  00003eb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000058d  00000000  00000000  000040b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000031f  00000000  00000000  00004641  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_alt_sim_info 00000040  00000000  00000000  00004960  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000020  00000000  00000000  000049a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .thread_model 00000003  00000000  00000000  000056f0  2**0
                  CONTENTS, READONLY
 15 .cpu          0000000c  00000000  00000000  000056f3  2**0
                  CONTENTS, READONLY
 16 .qsys         00000001  00000000  00000000  000056ff  2**0
                  CONTENTS, READONLY
 17 .simulation_enabled 00000001  00000000  00000000  00005700  2**0
                  CONTENTS, READONLY
 18 .stderr_dev   00000004  00000000  00000000  00005701  2**0
                  CONTENTS, READONLY
 19 .stdin_dev    00000004  00000000  00000000  00005705  2**0
                  CONTENTS, READONLY
 20 .stdout_dev   00000004  00000000  00000000  00005709  2**0
                  CONTENTS, READONLY
 21 .sopc_system_name 00000008  00000000  00000000  0000570d  2**0
                  CONTENTS, READONLY
 22 .quartus_project_dir 0000000d  00000000  00000000  00005715  2**0
                  CONTENTS, READONLY
 23 .jdi          0000382d  00000000  00000000  00005722  2**0
                  CONTENTS, READONLY
 24 .sopcinfo     0002523e  00000000  00000000  00008f4f  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00002000 l    d  .entry	00000000 .entry
00002020 l    d  .text	00000000 .text
000023b4 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00002058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 alt_load.c
000020fc l     F .text	00000020 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00002268 l     F .text	0000007c udivmodsi4
00002188 g     F .text	0000002c alt_main
000023b4 g       *ABS*	00000000 __flash_rwdata_start
00002000 g     F .entry	0000000c __reset
00002020 g       *ABS*	00000000 __flash_exceptions_start
000023b8 g     O .bss	00000004 alt_argv
0000a3b4 g       *ABS*	00000000 _gp
000021b4 g     F .text	00000004 usleep
00002000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
000023a4 g     F .text	00000008 __udivsi3
000023c0 g       *ABS*	00000000 __bss_end
00002258 g     F .text	00000004 alt_dcache_flush_all
000023b4 g       *ABS*	00000000 __ram_rwdata_end
000023b4 g       *ABS*	00000000 __ram_rodata_end
000023ac g     F .text	00000008 __umodsi3
000023c0 g       *ABS*	00000000 end
00004000 g       *ABS*	00000000 __alt_stack_pointer
00002020 g     F .text	0000003c _start
000021b8 g     F .text	00000004 alt_sys_init
000023b4 g       *ABS*	00000000 __ram_rwdata_start
000023b4 g       *ABS*	00000000 __ram_rodata_start
000021dc g     F .text	0000007c alt_busy_sleep
000023c0 g       *ABS*	00000000 __alt_stack_base
000023b4 g       *ABS*	00000000 __bss_start
000020dc g     F .text	00000020 memset
0000205c g     F .text	00000080 main
000023bc g     O .bss	00000004 alt_envp
000022e4 g     F .text	00000060 __divsi3
000023b4 g       *ABS*	00000000 __flash_rodata_start
000021bc g     F .text	00000020 alt_irq_init
000023b4 g     O .bss	00000004 alt_argc
00002020 g       *ABS*	00000000 __ram_exceptions_start
000023b4 g       *ABS*	00000000 _edata
000023c0 g       *ABS*	00000000 _end
00002020 g       *ABS*	00000000 __ram_exceptions_end
00002260 g     F .text	00000008 altera_nios2_qsys_irq_init
0000200c g       .entry	00000000 exit
00002344 g     F .text	00000060 __modsi3
00004000 g       *ABS*	00000000 __alt_data_end
0000200c g       .entry	00000000 _exit
0000225c g     F .text	00000004 alt_icache_flush_all
0000211c g     F .text	0000006c alt_load



Disassembly of section .entry:

00002000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    2000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    2004:	08480814 	ori	at,at,8224
    jmp r1
    2008:	0800683a 	jmp	at

0000200c <_exit>:
	...

Disassembly of section .text:

00002020 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    2020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    2024:	ded00014 	ori	sp,sp,16384

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
    2028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    202c:	d6a8ed14 	ori	gp,gp,41908
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    2030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    2034:	1088ed14 	ori	r2,r2,9140

    movhi r3, %hi(__bss_end)
    2038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    203c:	18c8f014 	ori	r3,r3,9152

    beq r2, r3, 1f
    2040:	10c00326 	beq	r2,r3,2050 <_start+0x30>

0:
    stw zero, (r2)
    2044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    2048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    204c:	10fffd36 	bltu	r2,r3,2044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    2050:	000211c0 	call	211c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    2054:	00021880 	call	2188 <alt_main>

00002058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    2058:	003fff06 	br	2058 <alt_after_alt_main>

0000205c <main>:
#include "sys/alt_stdio.h"
#include "altera_avalon_pio_regs.h"


int main()
{ 
    205c:	defd8c04 	addi	sp,sp,-2512
	int cnt = 0;
	int i;

	unsigned char array[2500] = {
	};
    2060:	d809883a 	mov	r4,sp
    2064:	000b883a 	mov	r5,zero
    2068:	01827104 	movi	r6,2500
#include "sys/alt_stdio.h"
#include "altera_avalon_pio_regs.h"


int main()
{ 
    206c:	dfc27315 	stw	ra,2508(sp)
    2070:	dc427215 	stw	r17,2504(sp)
    2074:	dc027115 	stw	r16,2500(sp)
	int cnt = 0;
	int i;

	unsigned char array[2500] = {
	};
    2078:	00020dc0 	call	20dc <memset>
    207c:	d805883a 	mov	r2,sp
    2080:	01000044 	movi	r4,1
    2084:	d8c27104 	addi	r3,sp,2500

	for (i=0; i<2500; i++){
			array[i] = 1;
    2088:	11000005 	stb	r4,0(r2)
    208c:	10800044 	addi	r2,r2,1
	int i;

	unsigned char array[2500] = {
	};

	for (i=0; i<2500; i++){
    2090:	10fffd1e 	bne	r2,r3,2088 <main+0x2c>
    2094:	0023883a 	mov	r17,zero
    2098:	d807883a 	mov	r3,sp
    209c:	d9027104 	addi	r4,sp,2500
			array[i] = 1;
		}

	int len = sizeof(array)/sizeof(array[0]);
	for (i=0; i<len; i++){
		cnt += array[i];
    20a0:	18800003 	ldbu	r2,0(r3)
    20a4:	18c00044 	addi	r3,r3,1
    20a8:	88a3883a 	add	r17,r17,r2
	for (i=0; i<2500; i++){
			array[i] = 1;
		}

	int len = sizeof(array)/sizeof(array[0]);
	for (i=0; i<len; i++){
    20ac:	193ffc1e 	bne	r3,r4,20a0 <main+0x44>
		cnt += array[i];
	}

  while (1){
	  IOWR_ALTERA_AVALON_PIO_DATA(0, cnt);
    20b0:	0021883a 	mov	r16,zero
    20b4:	84400035 	stwio	r17,0(r16)
//	  cnt++;
	  usleep(5000000);
    20b8:	01001334 	movhi	r4,76
    20bc:	2112d004 	addi	r4,r4,19264
    20c0:	00021b40 	call	21b4 <usleep>
	  IOWR_ALTERA_AVALON_PIO_DATA(0, cnt >> 8);
    20c4:	8805d23a 	srai	r2,r17,8
    20c8:	80800035 	stwio	r2,0(r16)
//	  cnt++;
	  usleep(5000000);
    20cc:	01001334 	movhi	r4,76
    20d0:	2112d004 	addi	r4,r4,19264
    20d4:	00021b40 	call	21b4 <usleep>
    20d8:	003ff506 	br	20b0 <main+0x54>

000020dc <memset>:
    20dc:	30000526 	beq	r6,zero,20f4 <memset+0x18>
    20e0:	310d883a 	add	r6,r6,r4
    20e4:	2005883a 	mov	r2,r4
    20e8:	11400005 	stb	r5,0(r2)
    20ec:	10800044 	addi	r2,r2,1
    20f0:	11bffd1e 	bne	r2,r6,20e8 <memset+0xc>
    20f4:	2005883a 	mov	r2,r4
    20f8:	f800283a 	ret

000020fc <alt_load_section>:

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    20fc:	2900051e 	bne	r5,r4,2114 <alt_load_section+0x18>
    2100:	f800283a 	ret
  {
    while( to != end )
    {
      *to++ = *from++;
    2104:	20800017 	ldw	r2,0(r4)
    2108:	21000104 	addi	r4,r4,4
    210c:	28800015 	stw	r2,0(r5)
    2110:	29400104 	addi	r5,r5,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    2114:	29bffb1e 	bne	r5,r6,2104 <alt_load_section+0x8>
    2118:	f800283a 	ret

0000211c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    211c:	deffff04 	addi	sp,sp,-4
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    2120:	01000034 	movhi	r4,0
    2124:	2108ed04 	addi	r4,r4,9140
    2128:	01400034 	movhi	r5,0
    212c:	2948ed04 	addi	r5,r5,9140
    2130:	01800034 	movhi	r6,0
    2134:	3188ed04 	addi	r6,r6,9140
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    2138:	dfc00015 	stw	ra,0(sp)
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    213c:	00020fc0 	call	20fc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    2140:	01000034 	movhi	r4,0
    2144:	21080804 	addi	r4,r4,8224
    2148:	01400034 	movhi	r5,0
    214c:	29480804 	addi	r5,r5,8224
    2150:	01800034 	movhi	r6,0
    2154:	31880804 	addi	r6,r6,8224
    2158:	00020fc0 	call	20fc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    215c:	01000034 	movhi	r4,0
    2160:	2108ed04 	addi	r4,r4,9140
    2164:	01400034 	movhi	r5,0
    2168:	2948ed04 	addi	r5,r5,9140
    216c:	01800034 	movhi	r6,0
    2170:	3188ed04 	addi	r6,r6,9140
    2174:	00020fc0 	call	20fc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    2178:	00022580 	call	2258 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    217c:	dfc00017 	ldw	ra,0(sp)
    2180:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    2184:	000225c1 	jmpi	225c <alt_icache_flush_all>

00002188 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    2188:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    218c:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    2190:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    2194:	00021bc0 	call	21bc <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    2198:	00021b80 	call	21b8 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    219c:	d1200017 	ldw	r4,-32768(gp)
    21a0:	d1600117 	ldw	r5,-32764(gp)
    21a4:	d1a00217 	ldw	r6,-32760(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    21a8:	dfc00017 	ldw	ra,0(sp)
    21ac:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    21b0:	000205c1 	jmpi	205c <main>

000021b4 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
    21b4:	00021dc1 	jmpi	21dc <alt_busy_sleep>

000021b8 <alt_sys_init>:
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
}
    21b8:	f800283a 	ret

000021bc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    21bc:	deffff04 	addi	sp,sp,-4
    21c0:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
    21c4:	00022600 	call	2260 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    21c8:	00800044 	movi	r2,1
    21cc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    21d0:	dfc00017 	ldw	ra,0(sp)
    21d4:	dec00104 	addi	sp,sp,4
    21d8:	f800283a 	ret

000021dc <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    21dc:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    21e0:	01500034 	movhi	r5,16384
    21e4:	297fffc4 	addi	r5,r5,-1
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    21e8:	dc000015 	stw	r16,0(sp)
    21ec:	dfc00115 	stw	ra,4(sp)
    21f0:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    21f4:	00023a40 	call	23a4 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    21f8:	10000f26 	beq	r2,zero,2238 <alt_busy_sleep+0x5c>
    21fc:	0007883a 	mov	r3,zero
    2200:	01200034 	movhi	r4,32768
    2204:	213fffc4 	addi	r4,r4,-1
    2208:	01700034 	movhi	r5,49152
    220c:	29400044 	addi	r5,r5,1
    2210:	00000406 	br	2224 <alt_busy_sleep+0x48>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    2214:	213fffc4 	addi	r4,r4,-1
    2218:	203ffe1e 	bne	r4,zero,2214 <alt_busy_sleep+0x38>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    221c:	8161883a 	add	r16,r16,r5
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    2220:	18c00044 	addi	r3,r3,1
    2224:	18bffb16 	blt	r3,r2,2214 <alt_busy_sleep+0x38>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    2228:	8405883a 	add	r2,r16,r16
    222c:	10bfffc4 	addi	r2,r2,-1
    2230:	103ffe1e 	bne	r2,zero,222c <alt_busy_sleep+0x50>
    2234:	00000306 	br	2244 <alt_busy_sleep+0x68>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    2238:	8405883a 	add	r2,r16,r16
    223c:	10bfffc4 	addi	r2,r2,-1
    2240:	00bffe16 	blt	zero,r2,223c <alt_busy_sleep+0x60>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
    2244:	0005883a 	mov	r2,zero
    2248:	dfc00117 	ldw	ra,4(sp)
    224c:	dc000017 	ldw	r16,0(sp)
    2250:	dec00204 	addi	sp,sp,8
    2254:	f800283a 	ret

00002258 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    2258:	f800283a 	ret

0000225c <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    225c:	f800283a 	ret

00002260 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    2260:	000170fa 	wrctl	ienable,zero
}
    2264:	f800283a 	ret

00002268 <udivmodsi4>:
    2268:	29001b2e 	bgeu	r5,r4,22d8 <udivmodsi4+0x70>
    226c:	28001a16 	blt	r5,zero,22d8 <udivmodsi4+0x70>
    2270:	00800044 	movi	r2,1
    2274:	0007883a 	mov	r3,zero
    2278:	01c007c4 	movi	r7,31
    227c:	00000306 	br	228c <udivmodsi4+0x24>
    2280:	19c01326 	beq	r3,r7,22d0 <udivmodsi4+0x68>
    2284:	18c00044 	addi	r3,r3,1
    2288:	28000416 	blt	r5,zero,229c <udivmodsi4+0x34>
    228c:	294b883a 	add	r5,r5,r5
    2290:	1085883a 	add	r2,r2,r2
    2294:	293ffa36 	bltu	r5,r4,2280 <udivmodsi4+0x18>
    2298:	10000d26 	beq	r2,zero,22d0 <udivmodsi4+0x68>
    229c:	0007883a 	mov	r3,zero
    22a0:	21400236 	bltu	r4,r5,22ac <udivmodsi4+0x44>
    22a4:	2149c83a 	sub	r4,r4,r5
    22a8:	1886b03a 	or	r3,r3,r2
    22ac:	1004d07a 	srli	r2,r2,1
    22b0:	280ad07a 	srli	r5,r5,1
    22b4:	103ffa1e 	bne	r2,zero,22a0 <udivmodsi4+0x38>
    22b8:	30000226 	beq	r6,zero,22c4 <udivmodsi4+0x5c>
    22bc:	2005883a 	mov	r2,r4
    22c0:	f800283a 	ret
    22c4:	1809883a 	mov	r4,r3
    22c8:	2005883a 	mov	r2,r4
    22cc:	f800283a 	ret
    22d0:	0007883a 	mov	r3,zero
    22d4:	003ff806 	br	22b8 <udivmodsi4+0x50>
    22d8:	00800044 	movi	r2,1
    22dc:	0007883a 	mov	r3,zero
    22e0:	003fef06 	br	22a0 <udivmodsi4+0x38>

000022e4 <__divsi3>:
    22e4:	defffe04 	addi	sp,sp,-8
    22e8:	dc000015 	stw	r16,0(sp)
    22ec:	dfc00115 	stw	ra,4(sp)
    22f0:	0021883a 	mov	r16,zero
    22f4:	20000c16 	blt	r4,zero,2328 <__divsi3+0x44>
    22f8:	000d883a 	mov	r6,zero
    22fc:	28000e16 	blt	r5,zero,2338 <__divsi3+0x54>
    2300:	00022680 	call	2268 <udivmodsi4>
    2304:	1007883a 	mov	r3,r2
    2308:	8005003a 	cmpeq	r2,r16,zero
    230c:	1000011e 	bne	r2,zero,2314 <__divsi3+0x30>
    2310:	00c7c83a 	sub	r3,zero,r3
    2314:	1805883a 	mov	r2,r3
    2318:	dfc00117 	ldw	ra,4(sp)
    231c:	dc000017 	ldw	r16,0(sp)
    2320:	dec00204 	addi	sp,sp,8
    2324:	f800283a 	ret
    2328:	0109c83a 	sub	r4,zero,r4
    232c:	04000044 	movi	r16,1
    2330:	000d883a 	mov	r6,zero
    2334:	283ff20e 	bge	r5,zero,2300 <__divsi3+0x1c>
    2338:	014bc83a 	sub	r5,zero,r5
    233c:	8021003a 	cmpeq	r16,r16,zero
    2340:	003fef06 	br	2300 <__divsi3+0x1c>

00002344 <__modsi3>:
    2344:	deffff04 	addi	sp,sp,-4
    2348:	dfc00015 	stw	ra,0(sp)
    234c:	01800044 	movi	r6,1
    2350:	2807883a 	mov	r3,r5
    2354:	20000416 	blt	r4,zero,2368 <__modsi3+0x24>
    2358:	28000c16 	blt	r5,zero,238c <__modsi3+0x48>
    235c:	dfc00017 	ldw	ra,0(sp)
    2360:	dec00104 	addi	sp,sp,4
    2364:	00022681 	jmpi	2268 <udivmodsi4>
    2368:	0109c83a 	sub	r4,zero,r4
    236c:	28000b16 	blt	r5,zero,239c <__modsi3+0x58>
    2370:	180b883a 	mov	r5,r3
    2374:	01800044 	movi	r6,1
    2378:	00022680 	call	2268 <udivmodsi4>
    237c:	0085c83a 	sub	r2,zero,r2
    2380:	dfc00017 	ldw	ra,0(sp)
    2384:	dec00104 	addi	sp,sp,4
    2388:	f800283a 	ret
    238c:	014bc83a 	sub	r5,zero,r5
    2390:	dfc00017 	ldw	ra,0(sp)
    2394:	dec00104 	addi	sp,sp,4
    2398:	00022681 	jmpi	2268 <udivmodsi4>
    239c:	0147c83a 	sub	r3,zero,r5
    23a0:	003ff306 	br	2370 <__modsi3+0x2c>

000023a4 <__udivsi3>:
    23a4:	000d883a 	mov	r6,zero
    23a8:	00022681 	jmpi	2268 <udivmodsi4>

000023ac <__umodsi3>:
    23ac:	01800044 	movi	r6,1
    23b0:	00022681 	jmpi	2268 <udivmodsi4>
