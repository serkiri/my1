
embcpumemlast.elf:     file format elf32-littlenios2
embcpumemlast.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x01004020

Program Header:
    LOAD off    0x00001000 vaddr 0x01004000 paddr 0x01004000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x01004020 paddr 0x01004020 align 2**12
         filesz 0x0000013c memsz 0x0000013c flags r-x
    LOAD off    0x00002000 vaddr 0x00000000 paddr 0x0100415c align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01004000  01004000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         0000013c  01004020  01004020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00000000  0100415c  00002000  2**2
                  ALLOC, SMALL_DATA
  3 .comment      00000026  00000000  00000000  0000115c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000108  00000000  00000000  00001188  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000013b  00000000  00000000  00001290  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000621  00000000  00000000  000013cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000032b  00000000  00000000  000019ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d97  00000000  00000000  00001d17  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000118  00000000  00000000  00002ab0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000334  00000000  00000000  00002bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000070  00000000  00000000  00002efc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_alt_sim_info 00000010  00000000  00000000  00002f6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000020  00000000  00000000  00002f80  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .thread_model 00000003  00000000  00000000  00003bbe  2**0
                  CONTENTS, READONLY
 15 .cpu          0000000c  00000000  00000000  00003bc1  2**0
                  CONTENTS, READONLY
 16 .qsys         00000001  00000000  00000000  00003bcd  2**0
                  CONTENTS, READONLY
 17 .simulation_enabled 00000001  00000000  00000000  00003bce  2**0
                  CONTENTS, READONLY
 18 .stderr_dev   00000004  00000000  00000000  00003bcf  2**0
                  CONTENTS, READONLY
 19 .stdin_dev    00000004  00000000  00000000  00003bd3  2**0
                  CONTENTS, READONLY
 20 .stdout_dev   00000004  00000000  00000000  00003bd7  2**0
                  CONTENTS, READONLY
 21 .sopc_system_name 00000009  00000000  00000000  00003bdb  2**0
                  CONTENTS, READONLY
 22 .quartus_project_dir 0000000d  00000000  00000000  00003be4  2**0
                  CONTENTS, READONLY
 23 .jdi          00003a4c  00000000  00000000  00003bf1  2**0
                  CONTENTS, READONLY
 24 .sopcinfo     0002b9e4  00000000  00000000  0000763d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01004000 l    d  .entry	00000000 .entry
01004020 l    d  .text	00000000 .text
00000000 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
01004058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
01004070 l     F .text	00000020 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
010040fc g     F .text	0000002c alt_main
0100415c g       *ABS*	00000000 __flash_rwdata_start
01004000 g     F .entry	0000000c __reset
01004020 g       *ABS*	00000000 __flash_exceptions_start
00000004 g     O .bss	00000004 alt_argv
00008000 g       *ABS*	00000000 _gp
01004000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0000000c g       *ABS*	00000000 __bss_end
0100414c g     F .text	00000004 alt_dcache_flush_all
00000000 g       *ABS*	00000000 __ram_rwdata_end
00000000 g       *ABS*	00000000 __ram_rodata_end
0000000c g       *ABS*	00000000 end
01000000 g       *ABS*	00000000 __alt_stack_pointer
01004020 g     F .text	0000003c _start
01004128 g     F .text	00000004 alt_sys_init
00000000 g       *ABS*	00000000 __ram_rwdata_start
00000000 g       *ABS*	00000000 __ram_rodata_start
0000000c g       *ABS*	00000000 __alt_stack_base
00000000 g       *ABS*	00000000 __bss_start
0100405c g     F .text	00000014 main
00000008 g     O .bss	00000004 alt_envp
0100415c g       *ABS*	00000000 __flash_rodata_start
0100412c g     F .text	00000020 alt_irq_init
00000000 g     O .bss	00000004 alt_argc
01004020 g       *ABS*	00000000 __ram_exceptions_start
00000000 g       *ABS*	00000000 __alt_mem_new_sdram_controller_0
00000000 g       *ABS*	00000000 _edata
0000000c g       *ABS*	00000000 _end
01004020 g       *ABS*	00000000 __ram_exceptions_end
01004154 g     F .text	00000008 altera_nios2_qsys_irq_init
0100400c g       .entry	00000000 exit
01000000 g       *ABS*	00000000 __alt_data_end
0100400c g       .entry	00000000 _exit
01004150 g     F .text	00000004 alt_icache_flush_all
01004090 g     F .text	0000006c alt_load



Disassembly of section .entry:

01004000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1004000:	00404034 	movhi	at,256
    ori r1, r1, %lo(_start)
 1004004:	08500814 	ori	at,at,16416
    jmp r1
 1004008:	0800683a 	jmp	at

0100400c <_exit>:
	...

Disassembly of section .text:

01004020 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 1004020:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
 1004024:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 1004028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
 100402c:	d6a00014 	ori	gp,gp,32768
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 1004030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
 1004034:	10800014 	ori	r2,r2,0

    movhi r3, %hi(__bss_end)
 1004038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
 100403c:	18c00314 	ori	r3,r3,12

    beq r2, r3, 1f
 1004040:	10c00326 	beq	r2,r3,1004050 <_start+0x30>

0:
    stw zero, (r2)
 1004044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 1004048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 100404c:	10fffd36 	bltu	r2,r3,1004044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 1004050:	10040900 	call	1004090 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 1004054:	10040fc0 	call	10040fc <alt_main>

01004058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 1004058:	003fff06 	br	1004058 <alt_after_alt_main>

0100405c <main>:
#include "system.h"


int main()
{ 
	  IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, 0xAA);
 100405c:	00c02a84 	movi	r3,170
 1004060:	00804074 	movhi	r2,257
 1004064:	10a40004 	addi	r2,r2,-28672
 1004068:	10c00035 	stwio	r3,0(r2)
 100406c:	003fff06 	br	100406c <main+0x10>

01004070 <alt_load_section>:

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 1004070:	2900051e 	bne	r5,r4,1004088 <alt_load_section+0x18>
 1004074:	f800283a 	ret
  {
    while( to != end )
    {
      *to++ = *from++;
 1004078:	20800017 	ldw	r2,0(r4)
 100407c:	21000104 	addi	r4,r4,4
 1004080:	28800015 	stw	r2,0(r5)
 1004084:	29400104 	addi	r5,r5,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 1004088:	29bffb1e 	bne	r5,r6,1004078 <alt_load_section+0x8>
 100408c:	f800283a 	ret

01004090 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 1004090:	deffff04 	addi	sp,sp,-4
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 1004094:	01004034 	movhi	r4,256
 1004098:	21105704 	addi	r4,r4,16732
 100409c:	01400034 	movhi	r5,0
 10040a0:	29400004 	addi	r5,r5,0
 10040a4:	01800034 	movhi	r6,0
 10040a8:	31800004 	addi	r6,r6,0
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 10040ac:	dfc00015 	stw	ra,0(sp)
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 10040b0:	10040700 	call	1004070 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 10040b4:	01004034 	movhi	r4,256
 10040b8:	21100804 	addi	r4,r4,16416
 10040bc:	01404034 	movhi	r5,256
 10040c0:	29500804 	addi	r5,r5,16416
 10040c4:	01804034 	movhi	r6,256
 10040c8:	31900804 	addi	r6,r6,16416
 10040cc:	10040700 	call	1004070 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 10040d0:	01004034 	movhi	r4,256
 10040d4:	21105704 	addi	r4,r4,16732
 10040d8:	01400034 	movhi	r5,0
 10040dc:	29400004 	addi	r5,r5,0
 10040e0:	01800034 	movhi	r6,0
 10040e4:	31800004 	addi	r6,r6,0
 10040e8:	10040700 	call	1004070 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 10040ec:	100414c0 	call	100414c <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 10040f0:	dfc00017 	ldw	ra,0(sp)
 10040f4:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
 10040f8:	10041501 	jmpi	1004150 <alt_icache_flush_all>

010040fc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 10040fc:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 1004100:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 1004104:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 1004108:	100412c0 	call	100412c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 100410c:	10041280 	call	1004128 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 1004110:	d1200017 	ldw	r4,-32768(gp)
 1004114:	d1600117 	ldw	r5,-32764(gp)
 1004118:	d1a00217 	ldw	r6,-32760(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 100411c:	dfc00017 	ldw	ra,0(sp)
 1004120:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 1004124:	100405c1 	jmpi	100405c <main>

01004128 <alt_sys_init>:
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
}
 1004128:	f800283a 	ret

0100412c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 100412c:	deffff04 	addi	sp,sp,-4
 1004130:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
 1004134:	10041540 	call	1004154 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 1004138:	00800044 	movi	r2,1
 100413c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 1004140:	dfc00017 	ldw	ra,0(sp)
 1004144:	dec00104 	addi	sp,sp,4
 1004148:	f800283a 	ret

0100414c <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 100414c:	f800283a 	ret

01004150 <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 1004150:	f800283a 	ret

01004154 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 1004154:	000170fa 	wrctl	ienable,zero
}
 1004158:	f800283a 	ret
