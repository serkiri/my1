
my1_8_eclipse.elf:     file format elf32-littlenios2
my1_8_eclipse.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00001020

Program Header:
    LOAD off    0x00001000 vaddr 0x00001000 paddr 0x00001000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00001020 paddr 0x00001020 align 2**12
         filesz 0x00000394 memsz 0x000003a0 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00001000  00001000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         00000394  00001020  00001020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  000013b4  000013b4  000013b4  2**2
                  ALLOC, SMALL_DATA
  3 .comment      00000026  00000000  00000000  000013b4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000188  00000000  00000000  000013e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001e2  00000000  00000000  00001568  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ade  00000000  00000000  0000174a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005ab  00000000  00000000  00002228  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000016ee  00000000  00000000  000027d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001fc  00000000  00000000  00003ec4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000597  00000000  00000000  000040c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000031f  00000000  00000000  00004657  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_alt_sim_info 00000040  00000000  00000000  00004978  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000020  00000000  00000000  000049b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .thread_model 00000003  00000000  00000000  00005708  2**0
                  CONTENTS, READONLY
 15 .cpu          0000000c  00000000  00000000  0000570b  2**0
                  CONTENTS, READONLY
 16 .qsys         00000001  00000000  00000000  00005717  2**0
                  CONTENTS, READONLY
 17 .simulation_enabled 00000001  00000000  00000000  00005718  2**0
                  CONTENTS, READONLY
 18 .stderr_dev   00000004  00000000  00000000  00005719  2**0
                  CONTENTS, READONLY
 19 .stdin_dev    00000004  00000000  00000000  0000571d  2**0
                  CONTENTS, READONLY
 20 .stdout_dev   00000004  00000000  00000000  00005721  2**0
                  CONTENTS, READONLY
 21 .sopc_system_name 00000006  00000000  00000000  00005725  2**0
                  CONTENTS, READONLY
 22 .quartus_project_dir 0000000d  00000000  00000000  0000572b  2**0
                  CONTENTS, READONLY
 23 .jdi          0000382d  00000000  00000000  00005738  2**0
                  CONTENTS, READONLY
 24 .sopcinfo     00025220  00000000  00000000  00008f65  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00001000 l    d  .entry	00000000 .entry
00001020 l    d  .text	00000000 .text
000013b4 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00001058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 alt_load.c
000010fc l     F .text	00000020 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00001268 l     F .text	0000007c udivmodsi4
00001188 g     F .text	0000002c alt_main
000013b4 g       *ABS*	00000000 __flash_rwdata_start
00001000 g     F .entry	0000000c __reset
00001020 g       *ABS*	00000000 __flash_exceptions_start
000013b8 g     O .bss	00000004 alt_argv
000093b4 g       *ABS*	00000000 _gp
000011b4 g     F .text	00000004 usleep
00001000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
000013a4 g     F .text	00000008 __udivsi3
000013c0 g       *ABS*	00000000 __bss_end
00001258 g     F .text	00000004 alt_dcache_flush_all
000013b4 g       *ABS*	00000000 __ram_rwdata_end
000013b4 g       *ABS*	00000000 __ram_rodata_end
000013ac g     F .text	00000008 __umodsi3
000013c0 g       *ABS*	00000000 end
00002000 g       *ABS*	00000000 __alt_stack_pointer
00001020 g     F .text	0000003c _start
000011b8 g     F .text	00000004 alt_sys_init
000013b4 g       *ABS*	00000000 __ram_rwdata_start
000013b4 g       *ABS*	00000000 __ram_rodata_start
000011dc g     F .text	0000007c alt_busy_sleep
000013c0 g       *ABS*	00000000 __alt_stack_base
000013b4 g       *ABS*	00000000 __bss_start
000010dc g     F .text	00000020 memset
0000105c g     F .text	00000080 main
000013bc g     O .bss	00000004 alt_envp
000012e4 g     F .text	00000060 __divsi3
000013b4 g       *ABS*	00000000 __flash_rodata_start
000011bc g     F .text	00000020 alt_irq_init
000013b4 g     O .bss	00000004 alt_argc
00001020 g       *ABS*	00000000 __ram_exceptions_start
000013b4 g       *ABS*	00000000 _edata
000013c0 g       *ABS*	00000000 _end
00001020 g       *ABS*	00000000 __ram_exceptions_end
00001260 g     F .text	00000008 altera_nios2_qsys_irq_init
0000100c g       .entry	00000000 exit
00001344 g     F .text	00000060 __modsi3
00002000 g       *ABS*	00000000 __alt_data_end
0000100c g       .entry	00000000 _exit
0000125c g     F .text	00000004 alt_icache_flush_all
0000111c g     F .text	0000006c alt_load



Disassembly of section .entry:

00001000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    1000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    1004:	08440814 	ori	at,at,4128
    jmp r1
    1008:	0800683a 	jmp	at

0000100c <_exit>:
	...

Disassembly of section .text:

00001020 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    1020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    1024:	dec80014 	ori	sp,sp,8192

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
    1028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    102c:	d6a4ed14 	ori	gp,gp,37812
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    1030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    1034:	1084ed14 	ori	r2,r2,5044

    movhi r3, %hi(__bss_end)
    1038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    103c:	18c4f014 	ori	r3,r3,5056

    beq r2, r3, 1f
    1040:	10c00326 	beq	r2,r3,1050 <_start+0x30>

0:
    stw zero, (r2)
    1044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    1048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    104c:	10fffd36 	bltu	r2,r3,1044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    1050:	000111c0 	call	111c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    1054:	00011880 	call	1188 <alt_main>

00001058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    1058:	003fff06 	br	1058 <alt_after_alt_main>

0000105c <main>:
#include "sys/alt_stdio.h"
#include "altera_avalon_pio_regs.h"


int main()
{ 
    105c:	defb1b04 	addi	sp,sp,-5012
	int cnt = 0;
	int i;

	unsigned char array[5000] = {
	};
    1060:	d809883a 	mov	r4,sp
    1064:	000b883a 	mov	r5,zero
    1068:	0184e204 	movi	r6,5000
#include "sys/alt_stdio.h"
#include "altera_avalon_pio_regs.h"


int main()
{ 
    106c:	dfc4e415 	stw	ra,5008(sp)
    1070:	dc44e315 	stw	r17,5004(sp)
    1074:	dc04e215 	stw	r16,5000(sp)
	int cnt = 0;
	int i;

	unsigned char array[5000] = {
	};
    1078:	00010dc0 	call	10dc <memset>
    107c:	d805883a 	mov	r2,sp
    1080:	01000044 	movi	r4,1
    1084:	d8c27104 	addi	r3,sp,2500

	for (i=0; i<2500; i++){
			array[i] = 1;
    1088:	11000005 	stb	r4,0(r2)
    108c:	10800044 	addi	r2,r2,1
	int i;

	unsigned char array[5000] = {
	};

	for (i=0; i<2500; i++){
    1090:	10fffd1e 	bne	r2,r3,1088 <main+0x2c>
    1094:	0023883a 	mov	r17,zero
    1098:	d807883a 	mov	r3,sp
    109c:	d904e204 	addi	r4,sp,5000
			array[i] = 1;
		}

	int len = sizeof(array)/sizeof(array[0]);
	for (i=0; i<len; i++){
		cnt += array[i];
    10a0:	18800003 	ldbu	r2,0(r3)
    10a4:	18c00044 	addi	r3,r3,1
    10a8:	88a3883a 	add	r17,r17,r2
	for (i=0; i<2500; i++){
			array[i] = 1;
		}

	int len = sizeof(array)/sizeof(array[0]);
	for (i=0; i<len; i++){
    10ac:	193ffc1e 	bne	r3,r4,10a0 <main+0x44>
		cnt += array[i];
	}

  while (1){
	  IOWR_ALTERA_AVALON_PIO_DATA(0, cnt);
    10b0:	0021883a 	mov	r16,zero
    10b4:	84400035 	stwio	r17,0(r16)
//	  cnt++;
	  usleep(5000000);
    10b8:	01001334 	movhi	r4,76
    10bc:	2112d004 	addi	r4,r4,19264
    10c0:	00011b40 	call	11b4 <usleep>
	  IOWR_ALTERA_AVALON_PIO_DATA(0, cnt >> 8);
    10c4:	8805d23a 	srai	r2,r17,8
    10c8:	80800035 	stwio	r2,0(r16)
//	  cnt++;
	  usleep(5000000);
    10cc:	01001334 	movhi	r4,76
    10d0:	2112d004 	addi	r4,r4,19264
    10d4:	00011b40 	call	11b4 <usleep>
    10d8:	003ff506 	br	10b0 <main+0x54>

000010dc <memset>:
    10dc:	30000526 	beq	r6,zero,10f4 <memset+0x18>
    10e0:	310d883a 	add	r6,r6,r4
    10e4:	2005883a 	mov	r2,r4
    10e8:	11400005 	stb	r5,0(r2)
    10ec:	10800044 	addi	r2,r2,1
    10f0:	11bffd1e 	bne	r2,r6,10e8 <memset+0xc>
    10f4:	2005883a 	mov	r2,r4
    10f8:	f800283a 	ret

000010fc <alt_load_section>:

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    10fc:	2900051e 	bne	r5,r4,1114 <alt_load_section+0x18>
    1100:	f800283a 	ret
  {
    while( to != end )
    {
      *to++ = *from++;
    1104:	20800017 	ldw	r2,0(r4)
    1108:	21000104 	addi	r4,r4,4
    110c:	28800015 	stw	r2,0(r5)
    1110:	29400104 	addi	r5,r5,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    1114:	29bffb1e 	bne	r5,r6,1104 <alt_load_section+0x8>
    1118:	f800283a 	ret

0000111c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    111c:	deffff04 	addi	sp,sp,-4
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    1120:	01000034 	movhi	r4,0
    1124:	2104ed04 	addi	r4,r4,5044
    1128:	01400034 	movhi	r5,0
    112c:	2944ed04 	addi	r5,r5,5044
    1130:	01800034 	movhi	r6,0
    1134:	3184ed04 	addi	r6,r6,5044
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    1138:	dfc00015 	stw	ra,0(sp)
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    113c:	00010fc0 	call	10fc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    1140:	01000034 	movhi	r4,0
    1144:	21040804 	addi	r4,r4,4128
    1148:	01400034 	movhi	r5,0
    114c:	29440804 	addi	r5,r5,4128
    1150:	01800034 	movhi	r6,0
    1154:	31840804 	addi	r6,r6,4128
    1158:	00010fc0 	call	10fc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    115c:	01000034 	movhi	r4,0
    1160:	2104ed04 	addi	r4,r4,5044
    1164:	01400034 	movhi	r5,0
    1168:	2944ed04 	addi	r5,r5,5044
    116c:	01800034 	movhi	r6,0
    1170:	3184ed04 	addi	r6,r6,5044
    1174:	00010fc0 	call	10fc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    1178:	00012580 	call	1258 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    117c:	dfc00017 	ldw	ra,0(sp)
    1180:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    1184:	000125c1 	jmpi	125c <alt_icache_flush_all>

00001188 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    1188:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    118c:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    1190:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    1194:	00011bc0 	call	11bc <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    1198:	00011b80 	call	11b8 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    119c:	d1200017 	ldw	r4,-32768(gp)
    11a0:	d1600117 	ldw	r5,-32764(gp)
    11a4:	d1a00217 	ldw	r6,-32760(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    11a8:	dfc00017 	ldw	ra,0(sp)
    11ac:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    11b0:	000105c1 	jmpi	105c <main>

000011b4 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
    11b4:	00011dc1 	jmpi	11dc <alt_busy_sleep>

000011b8 <alt_sys_init>:
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
}
    11b8:	f800283a 	ret

000011bc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    11bc:	deffff04 	addi	sp,sp,-4
    11c0:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
    11c4:	00012600 	call	1260 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    11c8:	00800044 	movi	r2,1
    11cc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    11d0:	dfc00017 	ldw	ra,0(sp)
    11d4:	dec00104 	addi	sp,sp,4
    11d8:	f800283a 	ret

000011dc <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    11dc:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    11e0:	01500034 	movhi	r5,16384
    11e4:	297fffc4 	addi	r5,r5,-1
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    11e8:	dc000015 	stw	r16,0(sp)
    11ec:	dfc00115 	stw	ra,4(sp)
    11f0:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    11f4:	00013a40 	call	13a4 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    11f8:	10000f26 	beq	r2,zero,1238 <alt_busy_sleep+0x5c>
    11fc:	0007883a 	mov	r3,zero
    1200:	01200034 	movhi	r4,32768
    1204:	213fffc4 	addi	r4,r4,-1
    1208:	01700034 	movhi	r5,49152
    120c:	29400044 	addi	r5,r5,1
    1210:	00000406 	br	1224 <alt_busy_sleep+0x48>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    1214:	213fffc4 	addi	r4,r4,-1
    1218:	203ffe1e 	bne	r4,zero,1214 <alt_busy_sleep+0x38>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    121c:	8161883a 	add	r16,r16,r5
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    1220:	18c00044 	addi	r3,r3,1
    1224:	18bffb16 	blt	r3,r2,1214 <alt_busy_sleep+0x38>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    1228:	8405883a 	add	r2,r16,r16
    122c:	10bfffc4 	addi	r2,r2,-1
    1230:	103ffe1e 	bne	r2,zero,122c <alt_busy_sleep+0x50>
    1234:	00000306 	br	1244 <alt_busy_sleep+0x68>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    1238:	8405883a 	add	r2,r16,r16
    123c:	10bfffc4 	addi	r2,r2,-1
    1240:	00bffe16 	blt	zero,r2,123c <alt_busy_sleep+0x60>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
    1244:	0005883a 	mov	r2,zero
    1248:	dfc00117 	ldw	ra,4(sp)
    124c:	dc000017 	ldw	r16,0(sp)
    1250:	dec00204 	addi	sp,sp,8
    1254:	f800283a 	ret

00001258 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    1258:	f800283a 	ret

0000125c <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    125c:	f800283a 	ret

00001260 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    1260:	000170fa 	wrctl	ienable,zero
}
    1264:	f800283a 	ret

00001268 <udivmodsi4>:
    1268:	29001b2e 	bgeu	r5,r4,12d8 <udivmodsi4+0x70>
    126c:	28001a16 	blt	r5,zero,12d8 <udivmodsi4+0x70>
    1270:	00800044 	movi	r2,1
    1274:	0007883a 	mov	r3,zero
    1278:	01c007c4 	movi	r7,31
    127c:	00000306 	br	128c <udivmodsi4+0x24>
    1280:	19c01326 	beq	r3,r7,12d0 <udivmodsi4+0x68>
    1284:	18c00044 	addi	r3,r3,1
    1288:	28000416 	blt	r5,zero,129c <udivmodsi4+0x34>
    128c:	294b883a 	add	r5,r5,r5
    1290:	1085883a 	add	r2,r2,r2
    1294:	293ffa36 	bltu	r5,r4,1280 <udivmodsi4+0x18>
    1298:	10000d26 	beq	r2,zero,12d0 <udivmodsi4+0x68>
    129c:	0007883a 	mov	r3,zero
    12a0:	21400236 	bltu	r4,r5,12ac <udivmodsi4+0x44>
    12a4:	2149c83a 	sub	r4,r4,r5
    12a8:	1886b03a 	or	r3,r3,r2
    12ac:	1004d07a 	srli	r2,r2,1
    12b0:	280ad07a 	srli	r5,r5,1
    12b4:	103ffa1e 	bne	r2,zero,12a0 <udivmodsi4+0x38>
    12b8:	30000226 	beq	r6,zero,12c4 <udivmodsi4+0x5c>
    12bc:	2005883a 	mov	r2,r4
    12c0:	f800283a 	ret
    12c4:	1809883a 	mov	r4,r3
    12c8:	2005883a 	mov	r2,r4
    12cc:	f800283a 	ret
    12d0:	0007883a 	mov	r3,zero
    12d4:	003ff806 	br	12b8 <udivmodsi4+0x50>
    12d8:	00800044 	movi	r2,1
    12dc:	0007883a 	mov	r3,zero
    12e0:	003fef06 	br	12a0 <udivmodsi4+0x38>

000012e4 <__divsi3>:
    12e4:	defffe04 	addi	sp,sp,-8
    12e8:	dc000015 	stw	r16,0(sp)
    12ec:	dfc00115 	stw	ra,4(sp)
    12f0:	0021883a 	mov	r16,zero
    12f4:	20000c16 	blt	r4,zero,1328 <__divsi3+0x44>
    12f8:	000d883a 	mov	r6,zero
    12fc:	28000e16 	blt	r5,zero,1338 <__divsi3+0x54>
    1300:	00012680 	call	1268 <udivmodsi4>
    1304:	1007883a 	mov	r3,r2
    1308:	8005003a 	cmpeq	r2,r16,zero
    130c:	1000011e 	bne	r2,zero,1314 <__divsi3+0x30>
    1310:	00c7c83a 	sub	r3,zero,r3
    1314:	1805883a 	mov	r2,r3
    1318:	dfc00117 	ldw	ra,4(sp)
    131c:	dc000017 	ldw	r16,0(sp)
    1320:	dec00204 	addi	sp,sp,8
    1324:	f800283a 	ret
    1328:	0109c83a 	sub	r4,zero,r4
    132c:	04000044 	movi	r16,1
    1330:	000d883a 	mov	r6,zero
    1334:	283ff20e 	bge	r5,zero,1300 <__divsi3+0x1c>
    1338:	014bc83a 	sub	r5,zero,r5
    133c:	8021003a 	cmpeq	r16,r16,zero
    1340:	003fef06 	br	1300 <__divsi3+0x1c>

00001344 <__modsi3>:
    1344:	deffff04 	addi	sp,sp,-4
    1348:	dfc00015 	stw	ra,0(sp)
    134c:	01800044 	movi	r6,1
    1350:	2807883a 	mov	r3,r5
    1354:	20000416 	blt	r4,zero,1368 <__modsi3+0x24>
    1358:	28000c16 	blt	r5,zero,138c <__modsi3+0x48>
    135c:	dfc00017 	ldw	ra,0(sp)
    1360:	dec00104 	addi	sp,sp,4
    1364:	00012681 	jmpi	1268 <udivmodsi4>
    1368:	0109c83a 	sub	r4,zero,r4
    136c:	28000b16 	blt	r5,zero,139c <__modsi3+0x58>
    1370:	180b883a 	mov	r5,r3
    1374:	01800044 	movi	r6,1
    1378:	00012680 	call	1268 <udivmodsi4>
    137c:	0085c83a 	sub	r2,zero,r2
    1380:	dfc00017 	ldw	ra,0(sp)
    1384:	dec00104 	addi	sp,sp,4
    1388:	f800283a 	ret
    138c:	014bc83a 	sub	r5,zero,r5
    1390:	dfc00017 	ldw	ra,0(sp)
    1394:	dec00104 	addi	sp,sp,4
    1398:	00012681 	jmpi	1268 <udivmodsi4>
    139c:	0147c83a 	sub	r3,zero,r5
    13a0:	003ff306 	br	1370 <__modsi3+0x2c>

000013a4 <__udivsi3>:
    13a4:	000d883a 	mov	r6,zero
    13a8:	00012681 	jmpi	1268 <udivmodsi4>

000013ac <__umodsi3>:
    13ac:	01800044 	movi	r6,1
    13b0:	00012681 	jmpi	1268 <udivmodsi4>
