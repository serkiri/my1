
emb16k.elf:     file format elf32-littlenios2
emb16k.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00004020

Program Header:
    LOAD off    0x00001000 vaddr 0x00004000 paddr 0x00004000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00004020 paddr 0x00004020 align 2**12
         filesz 0x00000394 memsz 0x000003a0 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00004000  00004000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         00000394  00004020  00004020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  000043b4  000043b4  000013b4  2**2
                  ALLOC, SMALL_DATA
  3 .comment      00000026  00000000  00000000  000013b4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000188  00000000  00000000  000013e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001e2  00000000  00000000  00001568  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ad7  00000000  00000000  0000174a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005ab  00000000  00000000  00002221  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000016e7  00000000  00000000  000027cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001fc  00000000  00000000  00003eb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000589  00000000  00000000  000040b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000031f  00000000  00000000  00004639  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_alt_sim_info 00000040  00000000  00000000  00004958  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000020  00000000  00000000  00004998  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .thread_model 00000003  00000000  00000000  000056e8  2**0
                  CONTENTS, READONLY
 15 .cpu          0000000c  00000000  00000000  000056eb  2**0
                  CONTENTS, READONLY
 16 .qsys         00000001  00000000  00000000  000056f7  2**0
                  CONTENTS, READONLY
 17 .simulation_enabled 00000001  00000000  00000000  000056f8  2**0
                  CONTENTS, READONLY
 18 .stderr_dev   00000004  00000000  00000000  000056f9  2**0
                  CONTENTS, READONLY
 19 .stdin_dev    00000004  00000000  00000000  000056fd  2**0
                  CONTENTS, READONLY
 20 .stdout_dev   00000004  00000000  00000000  00005701  2**0
                  CONTENTS, READONLY
 21 .sopc_system_name 00000009  00000000  00000000  00005705  2**0
                  CONTENTS, READONLY
 22 .quartus_project_dir 0000000d  00000000  00000000  0000570e  2**0
                  CONTENTS, READONLY
 23 .jdi          00003a4c  00000000  00000000  0000571b  2**0
                  CONTENTS, READONLY
 24 .sopcinfo     00024bbe  00000000  00000000  00009167  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00004000 l    d  .entry	00000000 .entry
00004020 l    d  .text	00000000 .text
000043b4 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00004058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 alt_load.c
000040fc l     F .text	00000020 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00004268 l     F .text	0000007c udivmodsi4
00004188 g     F .text	0000002c alt_main
000043b4 g       *ABS*	00000000 __flash_rwdata_start
00004000 g     F .entry	0000000c __reset
00004020 g       *ABS*	00000000 __flash_exceptions_start
000043b8 g     O .bss	00000004 alt_argv
0000c3b4 g       *ABS*	00000000 _gp
000041b4 g     F .text	00000004 usleep
00004000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
000043a4 g     F .text	00000008 __udivsi3
000043c0 g       *ABS*	00000000 __bss_end
00004258 g     F .text	00000004 alt_dcache_flush_all
000043b4 g       *ABS*	00000000 __ram_rwdata_end
000043b4 g       *ABS*	00000000 __ram_rodata_end
000043ac g     F .text	00000008 __umodsi3
000043c0 g       *ABS*	00000000 end
00008000 g       *ABS*	00000000 __alt_stack_pointer
00004020 g     F .text	0000003c _start
000041b8 g     F .text	00000004 alt_sys_init
000043b4 g       *ABS*	00000000 __ram_rwdata_start
000043b4 g       *ABS*	00000000 __ram_rodata_start
000041dc g     F .text	0000007c alt_busy_sleep
000043c0 g       *ABS*	00000000 __alt_stack_base
000043b4 g       *ABS*	00000000 __bss_start
000040dc g     F .text	00000020 memset
0000405c g     F .text	00000080 main
000043bc g     O .bss	00000004 alt_envp
000042e4 g     F .text	00000060 __divsi3
000043b4 g       *ABS*	00000000 __flash_rodata_start
000041bc g     F .text	00000020 alt_irq_init
000043b4 g     O .bss	00000004 alt_argc
00004020 g       *ABS*	00000000 __ram_exceptions_start
000043b4 g       *ABS*	00000000 _edata
000043c0 g       *ABS*	00000000 _end
00004020 g       *ABS*	00000000 __ram_exceptions_end
00004260 g     F .text	00000008 altera_nios2_qsys_irq_init
0000400c g       .entry	00000000 exit
00004344 g     F .text	00000060 __modsi3
00008000 g       *ABS*	00000000 __alt_data_end
0000400c g       .entry	00000000 _exit
0000425c g     F .text	00000004 alt_icache_flush_all
0000411c g     F .text	0000006c alt_load



Disassembly of section .entry:

00004000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    4000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    4004:	08500814 	ori	at,at,16416
    jmp r1
    4008:	0800683a 	jmp	at

0000400c <_exit>:
	...

Disassembly of section .text:

00004020 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    4020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    4024:	dee00014 	ori	sp,sp,32768

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
    4028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    402c:	d6b0ed14 	ori	gp,gp,50100
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    4030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    4034:	1090ed14 	ori	r2,r2,17332

    movhi r3, %hi(__bss_end)
    4038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    403c:	18d0f014 	ori	r3,r3,17344

    beq r2, r3, 1f
    4040:	10c00326 	beq	r2,r3,4050 <_start+0x30>

0:
    stw zero, (r2)
    4044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    4048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    404c:	10fffd36 	bltu	r2,r3,4044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    4050:	000411c0 	call	411c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    4054:	00041880 	call	4188 <alt_main>

00004058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    4058:	003fff06 	br	4058 <alt_after_alt_main>

0000405c <main>:
#include "sys/alt_stdio.h"
#include "altera_avalon_pio_regs.h"


int main()
{ 
    405c:	defb1b04 	addi	sp,sp,-5012
	int cnt = 0;
	int i;

	unsigned char array[5000] = {
	};
    4060:	d809883a 	mov	r4,sp
    4064:	000b883a 	mov	r5,zero
    4068:	0184e204 	movi	r6,5000
#include "sys/alt_stdio.h"
#include "altera_avalon_pio_regs.h"


int main()
{ 
    406c:	dfc4e415 	stw	ra,5008(sp)
    4070:	dc44e315 	stw	r17,5004(sp)
    4074:	dc04e215 	stw	r16,5000(sp)
	int cnt = 0;
	int i;

	unsigned char array[5000] = {
	};
    4078:	00040dc0 	call	40dc <memset>
    407c:	d805883a 	mov	r2,sp
    4080:	01000044 	movi	r4,1
    4084:	d8c4e204 	addi	r3,sp,5000

	for (i=0; i<5000; i++){
			array[i] = 1;
    4088:	11000005 	stb	r4,0(r2)
    408c:	10800044 	addi	r2,r2,1
	int i;

	unsigned char array[5000] = {
	};

	for (i=0; i<5000; i++){
    4090:	10fffd1e 	bne	r2,r3,4088 <main+0x2c>
    4094:	0023883a 	mov	r17,zero
    4098:	d807883a 	mov	r3,sp
    409c:	d904e204 	addi	r4,sp,5000
			array[i] = 1;
		}

	int len = sizeof(array)/sizeof(array[0]);
	for (i=0; i<len; i++){
		cnt += array[i];
    40a0:	18800003 	ldbu	r2,0(r3)
    40a4:	18c00044 	addi	r3,r3,1
    40a8:	88a3883a 	add	r17,r17,r2
	for (i=0; i<5000; i++){
			array[i] = 1;
		}

	int len = sizeof(array)/sizeof(array[0]);
	for (i=0; i<len; i++){
    40ac:	193ffc1e 	bne	r3,r4,40a0 <main+0x44>
		cnt += array[i];
	}

  while (1){
	  IOWR_ALTERA_AVALON_PIO_DATA(0, cnt);
    40b0:	0021883a 	mov	r16,zero
    40b4:	84400035 	stwio	r17,0(r16)
//	  cnt++;
	  usleep(5000000);
    40b8:	01001334 	movhi	r4,76
    40bc:	2112d004 	addi	r4,r4,19264
    40c0:	00041b40 	call	41b4 <usleep>
	  IOWR_ALTERA_AVALON_PIO_DATA(0, cnt >> 8);
    40c4:	8805d23a 	srai	r2,r17,8
    40c8:	80800035 	stwio	r2,0(r16)
//	  cnt++;
	  usleep(5000000);
    40cc:	01001334 	movhi	r4,76
    40d0:	2112d004 	addi	r4,r4,19264
    40d4:	00041b40 	call	41b4 <usleep>
    40d8:	003ff506 	br	40b0 <main+0x54>

000040dc <memset>:
    40dc:	30000526 	beq	r6,zero,40f4 <memset+0x18>
    40e0:	310d883a 	add	r6,r6,r4
    40e4:	2005883a 	mov	r2,r4
    40e8:	11400005 	stb	r5,0(r2)
    40ec:	10800044 	addi	r2,r2,1
    40f0:	11bffd1e 	bne	r2,r6,40e8 <memset+0xc>
    40f4:	2005883a 	mov	r2,r4
    40f8:	f800283a 	ret

000040fc <alt_load_section>:

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    40fc:	2900051e 	bne	r5,r4,4114 <alt_load_section+0x18>
    4100:	f800283a 	ret
  {
    while( to != end )
    {
      *to++ = *from++;
    4104:	20800017 	ldw	r2,0(r4)
    4108:	21000104 	addi	r4,r4,4
    410c:	28800015 	stw	r2,0(r5)
    4110:	29400104 	addi	r5,r5,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    4114:	29bffb1e 	bne	r5,r6,4104 <alt_load_section+0x8>
    4118:	f800283a 	ret

0000411c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    411c:	deffff04 	addi	sp,sp,-4
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    4120:	01000034 	movhi	r4,0
    4124:	2110ed04 	addi	r4,r4,17332
    4128:	01400034 	movhi	r5,0
    412c:	2950ed04 	addi	r5,r5,17332
    4130:	01800034 	movhi	r6,0
    4134:	3190ed04 	addi	r6,r6,17332
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    4138:	dfc00015 	stw	ra,0(sp)
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    413c:	00040fc0 	call	40fc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    4140:	01000034 	movhi	r4,0
    4144:	21100804 	addi	r4,r4,16416
    4148:	01400034 	movhi	r5,0
    414c:	29500804 	addi	r5,r5,16416
    4150:	01800034 	movhi	r6,0
    4154:	31900804 	addi	r6,r6,16416
    4158:	00040fc0 	call	40fc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    415c:	01000034 	movhi	r4,0
    4160:	2110ed04 	addi	r4,r4,17332
    4164:	01400034 	movhi	r5,0
    4168:	2950ed04 	addi	r5,r5,17332
    416c:	01800034 	movhi	r6,0
    4170:	3190ed04 	addi	r6,r6,17332
    4174:	00040fc0 	call	40fc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    4178:	00042580 	call	4258 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    417c:	dfc00017 	ldw	ra,0(sp)
    4180:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    4184:	000425c1 	jmpi	425c <alt_icache_flush_all>

00004188 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    4188:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    418c:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    4190:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    4194:	00041bc0 	call	41bc <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    4198:	00041b80 	call	41b8 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    419c:	d1200017 	ldw	r4,-32768(gp)
    41a0:	d1600117 	ldw	r5,-32764(gp)
    41a4:	d1a00217 	ldw	r6,-32760(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    41a8:	dfc00017 	ldw	ra,0(sp)
    41ac:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    41b0:	000405c1 	jmpi	405c <main>

000041b4 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
    41b4:	00041dc1 	jmpi	41dc <alt_busy_sleep>

000041b8 <alt_sys_init>:
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
}
    41b8:	f800283a 	ret

000041bc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    41bc:	deffff04 	addi	sp,sp,-4
    41c0:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
    41c4:	00042600 	call	4260 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    41c8:	00800044 	movi	r2,1
    41cc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    41d0:	dfc00017 	ldw	ra,0(sp)
    41d4:	dec00104 	addi	sp,sp,4
    41d8:	f800283a 	ret

000041dc <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    41dc:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    41e0:	01500034 	movhi	r5,16384
    41e4:	297fffc4 	addi	r5,r5,-1
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    41e8:	dc000015 	stw	r16,0(sp)
    41ec:	dfc00115 	stw	ra,4(sp)
    41f0:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    41f4:	00043a40 	call	43a4 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    41f8:	10000f26 	beq	r2,zero,4238 <alt_busy_sleep+0x5c>
    41fc:	0007883a 	mov	r3,zero
    4200:	01200034 	movhi	r4,32768
    4204:	213fffc4 	addi	r4,r4,-1
    4208:	01700034 	movhi	r5,49152
    420c:	29400044 	addi	r5,r5,1
    4210:	00000406 	br	4224 <alt_busy_sleep+0x48>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    4214:	213fffc4 	addi	r4,r4,-1
    4218:	203ffe1e 	bne	r4,zero,4214 <alt_busy_sleep+0x38>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    421c:	8161883a 	add	r16,r16,r5
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    4220:	18c00044 	addi	r3,r3,1
    4224:	18bffb16 	blt	r3,r2,4214 <alt_busy_sleep+0x38>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    4228:	8405883a 	add	r2,r16,r16
    422c:	10bfffc4 	addi	r2,r2,-1
    4230:	103ffe1e 	bne	r2,zero,422c <alt_busy_sleep+0x50>
    4234:	00000306 	br	4244 <alt_busy_sleep+0x68>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    4238:	8405883a 	add	r2,r16,r16
    423c:	10bfffc4 	addi	r2,r2,-1
    4240:	00bffe16 	blt	zero,r2,423c <alt_busy_sleep+0x60>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
    4244:	0005883a 	mov	r2,zero
    4248:	dfc00117 	ldw	ra,4(sp)
    424c:	dc000017 	ldw	r16,0(sp)
    4250:	dec00204 	addi	sp,sp,8
    4254:	f800283a 	ret

00004258 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    4258:	f800283a 	ret

0000425c <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    425c:	f800283a 	ret

00004260 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    4260:	000170fa 	wrctl	ienable,zero
}
    4264:	f800283a 	ret

00004268 <udivmodsi4>:
    4268:	29001b2e 	bgeu	r5,r4,42d8 <udivmodsi4+0x70>
    426c:	28001a16 	blt	r5,zero,42d8 <udivmodsi4+0x70>
    4270:	00800044 	movi	r2,1
    4274:	0007883a 	mov	r3,zero
    4278:	01c007c4 	movi	r7,31
    427c:	00000306 	br	428c <udivmodsi4+0x24>
    4280:	19c01326 	beq	r3,r7,42d0 <udivmodsi4+0x68>
    4284:	18c00044 	addi	r3,r3,1
    4288:	28000416 	blt	r5,zero,429c <udivmodsi4+0x34>
    428c:	294b883a 	add	r5,r5,r5
    4290:	1085883a 	add	r2,r2,r2
    4294:	293ffa36 	bltu	r5,r4,4280 <udivmodsi4+0x18>
    4298:	10000d26 	beq	r2,zero,42d0 <udivmodsi4+0x68>
    429c:	0007883a 	mov	r3,zero
    42a0:	21400236 	bltu	r4,r5,42ac <udivmodsi4+0x44>
    42a4:	2149c83a 	sub	r4,r4,r5
    42a8:	1886b03a 	or	r3,r3,r2
    42ac:	1004d07a 	srli	r2,r2,1
    42b0:	280ad07a 	srli	r5,r5,1
    42b4:	103ffa1e 	bne	r2,zero,42a0 <udivmodsi4+0x38>
    42b8:	30000226 	beq	r6,zero,42c4 <udivmodsi4+0x5c>
    42bc:	2005883a 	mov	r2,r4
    42c0:	f800283a 	ret
    42c4:	1809883a 	mov	r4,r3
    42c8:	2005883a 	mov	r2,r4
    42cc:	f800283a 	ret
    42d0:	0007883a 	mov	r3,zero
    42d4:	003ff806 	br	42b8 <udivmodsi4+0x50>
    42d8:	00800044 	movi	r2,1
    42dc:	0007883a 	mov	r3,zero
    42e0:	003fef06 	br	42a0 <udivmodsi4+0x38>

000042e4 <__divsi3>:
    42e4:	defffe04 	addi	sp,sp,-8
    42e8:	dc000015 	stw	r16,0(sp)
    42ec:	dfc00115 	stw	ra,4(sp)
    42f0:	0021883a 	mov	r16,zero
    42f4:	20000c16 	blt	r4,zero,4328 <__divsi3+0x44>
    42f8:	000d883a 	mov	r6,zero
    42fc:	28000e16 	blt	r5,zero,4338 <__divsi3+0x54>
    4300:	00042680 	call	4268 <udivmodsi4>
    4304:	1007883a 	mov	r3,r2
    4308:	8005003a 	cmpeq	r2,r16,zero
    430c:	1000011e 	bne	r2,zero,4314 <__divsi3+0x30>
    4310:	00c7c83a 	sub	r3,zero,r3
    4314:	1805883a 	mov	r2,r3
    4318:	dfc00117 	ldw	ra,4(sp)
    431c:	dc000017 	ldw	r16,0(sp)
    4320:	dec00204 	addi	sp,sp,8
    4324:	f800283a 	ret
    4328:	0109c83a 	sub	r4,zero,r4
    432c:	04000044 	movi	r16,1
    4330:	000d883a 	mov	r6,zero
    4334:	283ff20e 	bge	r5,zero,4300 <__divsi3+0x1c>
    4338:	014bc83a 	sub	r5,zero,r5
    433c:	8021003a 	cmpeq	r16,r16,zero
    4340:	003fef06 	br	4300 <__divsi3+0x1c>

00004344 <__modsi3>:
    4344:	deffff04 	addi	sp,sp,-4
    4348:	dfc00015 	stw	ra,0(sp)
    434c:	01800044 	movi	r6,1
    4350:	2807883a 	mov	r3,r5
    4354:	20000416 	blt	r4,zero,4368 <__modsi3+0x24>
    4358:	28000c16 	blt	r5,zero,438c <__modsi3+0x48>
    435c:	dfc00017 	ldw	ra,0(sp)
    4360:	dec00104 	addi	sp,sp,4
    4364:	00042681 	jmpi	4268 <udivmodsi4>
    4368:	0109c83a 	sub	r4,zero,r4
    436c:	28000b16 	blt	r5,zero,439c <__modsi3+0x58>
    4370:	180b883a 	mov	r5,r3
    4374:	01800044 	movi	r6,1
    4378:	00042680 	call	4268 <udivmodsi4>
    437c:	0085c83a 	sub	r2,zero,r2
    4380:	dfc00017 	ldw	ra,0(sp)
    4384:	dec00104 	addi	sp,sp,4
    4388:	f800283a 	ret
    438c:	014bc83a 	sub	r5,zero,r5
    4390:	dfc00017 	ldw	ra,0(sp)
    4394:	dec00104 	addi	sp,sp,4
    4398:	00042681 	jmpi	4268 <udivmodsi4>
    439c:	0147c83a 	sub	r3,zero,r5
    43a0:	003ff306 	br	4370 <__modsi3+0x2c>

000043a4 <__udivsi3>:
    43a4:	000d883a 	mov	r6,zero
    43a8:	00042681 	jmpi	4268 <udivmodsi4>

000043ac <__umodsi3>:
    43ac:	01800044 	movi	r6,1
    43b0:	00042681 	jmpi	4268 <udivmodsi4>
